# -*- coding: utf-8 -*-
"""dataprocessingwithpython

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tKOZvXKfZNrhKWaInwvriUnKHUoYFdrM

## Trabalho final integrado


O departamento de crédito da QuantumFinance solicitou a criação de um algoritmo para prever o preço de venda de suas casas com
base em várias características. Eles coletaram dados de vendas recentes, incluindo informações como o tamanho da casa (em pés
quadrados), o número de quartos, o número de banheiros, a idade da casa (em anos) e a proximidade com o centro da cidade (em
quilômetros).

O objetivo é desenvolver um modelo de Regressão Linear Multivariada que preveja o preço de venda das casas com base nessas
características. Para isso, você recebeu um conjunto de dados contendo informações de venda de várias casas, incluindo o preço de
venda e as características mencionadas anteriormente.
"""

# Commented out IPython magic to ensure Python compatibility.
#Importando as bibliotecas necessárias
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline
from sklearn.model_selection import train_test_split
from sklearn import linear_model
from sklearn.metrics import mean_squared_error, r2_score
import joblib
from datetime import datetime

#Ler o dataset contendo os dados de vendas
from google.colab import files

carregado = files.upload()

#Importar e realizar algumas validações no dataset
df_original = pd.read_csv("house_prices.csv")

df_original.shape

df_original.head(10)

#Verificando colunas do dataframe
df_original.columns

#Verificar dados nulos
df_original.isnull().sum()

#Verificar estatísticas descritivas da base
df_original.describe()

#Quantidade de registros por coluna
df_original.count()

#Criar cópia do df por segurança para realizar testes de formatação de datas
df_copia = df_original.copy()
df_copia.shape

#Realizar tratamento da coluna de data = 'date'
def convert_date_format(date):
  date_part = date.split('T')[0]

  #format_date = datetime.strptime(date_part, '%Y%m%d').strftime('%Y-%m-%d')
  format_date = datetime.strptime(date_part, '%Y%m%d')

  return format_date

#Aplicar a função de tratamento da coluna de data
df_copia['date'] = df_copia['date'].apply(convert_date_format)

df_copia['date'].head(5)

df_copia['date'].tail(3)

df_copia.info()



df_copia.corr()

sns.heatmap(df_copia.corr())

#Verificar se existem casas com +4 quartos e 5 banheiros
df_copia.loc[(df_copia['bedrooms'] > 4) & (df_copia['bathrooms'] >= 5.00)]

#Verificar valor total arrecado por cada vendedor nas vendas
grouped = df_copia.groupby('id')['price'].sum().reset_index()

sorted = grouped.sort_values(by='price', ascending=False)
sorted

df_copia.to_excel('teste.xlsx', index=False)